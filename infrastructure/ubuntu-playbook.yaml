---
- name: "Playbook to install install podman and deploy an linux-container"
  hosts: localhost
  gather_facts: false
  become: yes
  # storing imput variable to later pass into the ./config.file
  vars_prompt:
    - name: "username"
      prompt: Enter the name of username
      private: false

    - name: "token"
      prompt: Enter the projects-repo token
      private: false

  tasks:
    - name: "Install podman"
      package:
        name: podman
        state: present

    - name: "Install systemd"
      package:
        name: systemd
        state: present

    # /etc/containers/policy.json in master/host (at the moment, policy is insecure)
    - name: "Copy policy.json to /etc/containers"
      copy:
        src: /home/miggy/Documents/project-text/policy.json
        dest: /etc/containers/policy.json
      become: yes

    - name: "Pull ubuntu image"
      containers.podman.podman_image:
        name: docker.io/library/ubuntu:20.04
        pull: yes

    - name: "Install ubuntu image"
      containers.podman.podman_container:
        name: ubuntu_machine_test1
        image: docker.io/library/ubuntu:20.04
        state: started
        command: ["tail", "-f", "/dev/null"]

    - name: "Create actions-runner directory"
      shell: |
        podman exec -it ubuntu_machine_test1 mkdir -p /home/actions-runner

    - name: "Install net-tools, python3, curl, and pip3"
      shell: |
        podman exec -it ubuntu_machine_test1 /bin/bash -c 'apt-get update && apt-get install -y net-tools curl python3 python3-pip'

    - name: "Install nodeJS"
      shell: |
        podman exec -it ubuntu_machine_test1 /bin/bash -c '
        curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
        apt-get install -y nodejs'
      args:
        executable: /bin/bash

    - name: "Install pre-commit"
      shell: |
        podman exec -it ubuntu_machine_test1 /bin/bash -c 'pip install pre-commit'

    - name: "Switch to /actions-runner path & install the runner"
      shell: |
        podman exec -it ubuntu_machine_test1 /bin/bash -c 'cd /home/actions-runner && curl -o actions-runner-linux-x64-2.309.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.309.0/actions-runner-linux-x64-2.309.0.tar.gz'
      args:
        executable: /bin/bash

    - name: "Extract tar.gz file"
      shell: |
        podman exec -it ubuntu_machine_test1 /bin/bash -c 'cd /home/actions-runner && tar xzf ./actions-runner-linux-x64-2.309.0.tar.gz'
      args:
        executable: /bin/bash

    - name: "Install Dotnet Core 6.0 Dependencies"
      shell: podman exec -it ubuntu_machine_test1 /bin/bash -c 'cd /home/actions-runner && sudo ./bin/installdependencies.sh'

    - name: "Pass input args to ./config inside the container"
      shell: |
        podman exec -it ubuntu_machine_test1 /bin/bash -c 'cd /home/actions-runner && RUNNER_ALLOW_RUNASROOT="1" ./config.sh --url "https://github.com/{{ username }}" --token "{{ token }}"'

    - name: "Copy enable.sh script to container"
      copy:
        src: /home/miggy/Documents/scripts/enable-pipe.sh
        dest: /home/actions-runner/enable-pipe.sh

    - name: "Make enable.sh script executable"
      shell: chmod -x /home/actions-runner/enable-pipe.sh
      become: yes

    - name: "Execute the enable.sh and run.sh scripts"
      shell: podman exec -it ubuntu_machine_test1 /bin/bash -c '/home/actions-runner/enable-pipe.sh'
      become: yes

    # fun stuff
    - name: "Print message for fun"
      ansible.builtin.debug:
        msg: "ALL GOOD, WE ARE SET"
